From a84c6c5ca7ce5228a9a154d16166ab5442236552 Mon Sep 17 00:00:00 2001
From: Kazunori Kobayashi <kkobayas@igel.co.jp>
Date: Wed, 12 Feb 2014 18:36:04 +0900
Subject: [PATCH 03/24] waylandsink: Change wayland-display property from
 display structure to wl_display object

The display structure definition can't be referred from the GStreamer application
because there is the definition in an internal header.
A wl_display object would rather be passed as a plugin property because
it can be referred to in the wayland client protocol header.
---
 ext/wayland/gstwaylandsink.c | 23 ++++++++++++++++-------
 ext/wayland/gstwaylandsink.h |  2 ++
 2 files changed, 18 insertions(+), 7 deletions(-)

diff --git a/ext/wayland/gstwaylandsink.c b/ext/wayland/gstwaylandsink.c
index a02b9b1..7a322fb 100644
--- a/ext/wayland/gstwaylandsink.c
+++ b/ext/wayland/gstwaylandsink.c
@@ -193,6 +193,7 @@ gst_wayland_sink_init (GstWaylandSink * sink)
   sink->window = NULL;
   sink->shm_pool = NULL;
   sink->pool = NULL;
+  sink->ext_display = FALSE;
 
   g_mutex_init (&sink->wayland_lock);
 }
@@ -205,7 +206,7 @@ gst_wayland_sink_get_property (GObject * object,
 
   switch (prop_id) {
     case PROP_WAYLAND_DISPLAY:
-      g_value_set_pointer (value, sink->display);
+      g_value_set_pointer (value, sink->display->display);
       break;
     default:
       G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
@@ -221,7 +222,8 @@ gst_wayland_sink_set_property (GObject * object,
 
   switch (prop_id) {
     case PROP_WAYLAND_DISPLAY:
-      sink->display = g_value_get_pointer (value);
+      sink->display->display = g_value_get_pointer (value);
+      sink->ext_display = TRUE;
       break;
     default:
       G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
@@ -230,7 +232,7 @@ gst_wayland_sink_set_property (GObject * object,
 }
 
 static void
-destroy_display (struct display *display)
+destroy_display (struct display *display, gboolean ext_display)
 {
   if (display->shm)
     wl_shm_destroy (display->shm);
@@ -242,7 +244,9 @@ destroy_display (struct display *display)
     wl_compositor_destroy (display->compositor);
 
   wl_display_flush (display->display);
-  wl_display_disconnect (display->display);
+  if (!ext_display)
+    wl_display_disconnect (display->display);
+
   if (display->drm_fd >= 0)
     close (display->drm_fd);
 
@@ -285,7 +289,7 @@ gst_wayland_sink_finalize (GObject * object)
   if (sink->window)
     destroy_window (sink->window);
   if (sink->display)
-    destroy_display (sink->display);
+    destroy_display (sink->display, sink->ext_display);
   if (sink->shm_pool)
     shm_pool_destroy (sink->shm_pool);
 
@@ -405,8 +409,13 @@ create_display (GstWaylandSink * sink)
 
   display = sink->display;
 
-  if (display->display == NULL) {
-    return FALSE;
+  if (!sink->ext_display) {
+    GST_DEBUG_OBJECT (sink, "Try to connect wl_display by myself");
+    display->display = wl_display_connect (NULL);
+    if (display->display == NULL) {
+      GST_ERROR_OBJECT (sink, "Failed to connect wl_display");
+      return FALSE;
+    }
   }
 
   display->registry = wl_display_get_registry (display->display);
diff --git a/ext/wayland/gstwaylandsink.h b/ext/wayland/gstwaylandsink.h
index d62563b..8843be6 100644
--- a/ext/wayland/gstwaylandsink.h
+++ b/ext/wayland/gstwaylandsink.h
@@ -114,6 +114,8 @@ struct _GstWaylandSink
   gint video_width;
   gint video_height;
   uint32_t format;
+
+  gboolean ext_display;
 };
 
 struct _GstWaylandSinkClass
-- 
1.8.0

