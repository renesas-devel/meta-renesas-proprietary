From 5f11da07314c862fff45bf867270b784ca20a92c Mon Sep 17 00:00:00 2001
From: HungTran <hung.tran.jy@rvc.renesas.com>
Date: Fri, 30 May 2014 16:27:50 +0700
Subject: [PATCH 08/22] Support no-copy mode

Support no-copy mode.
Combine with userptr mode of v4l2sink for zero-copy process.

refs #55991
Signed-off-by: HungTran <hung.tran.jy@rvc.renesas.com>
---
 omx/gstomxvideodec.c |  204 ++++++++++++++++++++++++++++++++++++++++++++++----
 omx/gstomxvideodec.h |    3 +
 2 files changed, 191 insertions(+), 16 deletions(-)

diff --git a/omx/gstomxvideodec.c b/omx/gstomxvideodec.c
index b70fa44..7a17321 100644
--- a/omx/gstomxvideodec.c
+++ b/omx/gstomxvideodec.c
@@ -56,6 +56,15 @@ struct _GstOMXMemoryAllocatorClass
   GstAllocatorClass parent_class;
 };
 
+
+/* User data and function for release OMX buffer in no-copy mode */
+struct GstOMXBufferCallback
+{
+  GstOMXPort   *out_port;
+  GstOMXBuffer *buf;
+};
+static void GstOMXBufCallbackfunc (struct GstOMXBufferCallback *);
+
 #define GST_OMX_MEMORY_TYPE "openmax"
 
 static GstMemory *
@@ -668,9 +677,16 @@ static OMX_ERRORTYPE gst_omx_video_dec_allocate_output_buffers (GstOMXVideoDec *
 static OMX_ERRORTYPE gst_omx_video_dec_deallocate_output_buffers (GstOMXVideoDec
     * self);
 
+static void gst_omx_video_dec_set_property (GObject * object, guint prop_id,
+    const GValue * value, GParamSpec * pspec);
+static void gst_omx_video_dec_get_property (GObject * object, guint prop_id,
+    GValue * value, GParamSpec * pspec);
+
+
 enum
 {
-  PROP_0
+  PROP_0,
+  PROP_NO_COPY
 };
 
 /* class initialization */
@@ -691,6 +707,8 @@ gst_omx_video_dec_class_init (GstOMXVideoDecClass * klass)
   GstVideoDecoderClass *video_decoder_class = GST_VIDEO_DECODER_CLASS (klass);
 
   gobject_class->finalize = gst_omx_video_dec_finalize;
+  gobject_class->set_property = gst_omx_video_dec_set_property;
+  gobject_class->get_property = gst_omx_video_dec_get_property;
 
   element_class->change_state =
       GST_DEBUG_FUNCPTR (gst_omx_video_dec_change_state);
@@ -711,6 +729,12 @@ gst_omx_video_dec_class_init (GstOMXVideoDecClass * klass)
   klass->cdata.default_src_template_caps = "video/x-raw, "
       "width = " GST_VIDEO_SIZE_RANGE ", "
       "height = " GST_VIDEO_SIZE_RANGE ", " "framerate = " GST_VIDEO_FPS_RANGE;
+
+    g_object_class_install_property (gobject_class, PROP_NO_COPY,
+      g_param_spec_boolean ("no-copy", "No copy",
+        "Whether or not to transfer decoded data without copy",
+        TRUE, G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS |
+        GST_PARAM_MUTABLE_READY));
 }
 
 static void
@@ -720,6 +744,8 @@ gst_omx_video_dec_init (GstOMXVideoDec * self)
 
   g_mutex_init (&self->drain_lock);
   g_cond_init (&self->drain_cond);
+
+  self->no_copy = FALSE;
 }
 
 static gboolean
@@ -1587,24 +1613,124 @@ gst_omx_video_dec_loop (GstOMXVideoDec * self)
       frame = NULL;
       buf = NULL;
     } else {
-      if ((flow_ret =
-              gst_video_decoder_allocate_output_frame (GST_VIDEO_DECODER
-                  (self), frame)) == GST_FLOW_OK) {
-        /* FIXME: This currently happens because of a race condition too.
-         * We first need to reconfigure the output port and then the input
-         * port if both need reconfiguration.
-         */
-        if (!gst_omx_video_dec_fill_buffer (self, buf, frame->output_buffer)) {
-          gst_buffer_replace (&frame->output_buffer, NULL);
-          flow_ret =
-              gst_video_decoder_drop_frame (GST_VIDEO_DECODER (self), frame);
-          frame = NULL;
-          gst_omx_port_release_buffer (port, buf);
-          goto invalid_buffer;
+      if (self->no_copy) {
+        /* Create a Gst buffer to wrap decoded data, then send to
+         * downstream plugin.
+         * Need to hold up the OMX buffer until downstream plugin
+         * finishes using. To do that, add a callback function so that
+         * OMX buffer will be released when downstream plugin unref
+         * Gst buffer */
+        GstBuffer *newbuf;
+        GstVideoCodecState *state;
+        GstVideoInfo *vinfo;
+        gint i;
+        gint offs, plane_size, used_size;
+        gint width, base_stride, sliceheigh, height;
+        OMX_PARAM_PORTDEFINITIONTYPE *port_def;
+        GstMemory *mem;
+        gsize offset[GST_VIDEO_MAX_PLANES];
+        gint stride[GST_VIDEO_MAX_PLANES];
+
+
+        state =
+          gst_video_decoder_get_output_state (GST_VIDEO_DECODER (self));
+        vinfo = &state->info;
+
+        port_def    = &self->dec_out_port->port_def;
+        width       = port_def->format.video.nFrameWidth;
+        base_stride = port_def->format.video.nStride;
+        sliceheigh  = port_def->format.video.nSliceHeight;
+        height       = port_def->format.video.nFrameHeight;
+
+
+        newbuf = gst_buffer_new ();
+
+        /* Calculate memory area to add to Gst buffer */
+        offs = 0;
+        for (i=0; i < GST_VIDEO_INFO_N_PLANES(vinfo); i++) {
+          offset[i] = offs;
+
+          switch (GST_VIDEO_INFO_FORMAT(vinfo)) {
+            case GST_VIDEO_FORMAT_NV12:
+            case GST_VIDEO_FORMAT_NV21:
+            case GST_VIDEO_FORMAT_NV16:
+            case GST_VIDEO_FORMAT_NV24:
+              /* The scale_width value is wrong for plane 2 of these
+               * Semiplana formats. Need to multiply with 2 */
+              stride[i] = (i == 0 ? 1 : 2) *
+                  GST_VIDEO_FORMAT_INFO_SCALE_WIDTH (vinfo->finfo, i,
+                  base_stride);
+              break;
+            default:
+              stride[i] =
+                  GST_VIDEO_FORMAT_INFO_SCALE_WIDTH (vinfo->finfo, i,
+                  base_stride);
+              break;
+          }
+
+          plane_size = stride[i] *
+              GST_VIDEO_FORMAT_INFO_SCALE_HEIGHT (vinfo->finfo, i, sliceheigh);
+          used_size = stride[i] *
+              GST_VIDEO_FORMAT_INFO_SCALE_HEIGHT (vinfo->finfo, i, height);
+
+          if (i == 0) {
+            struct GstOMXBufferCallback *release;
+            release = g_malloc (sizeof(struct GstOMXBufferCallback));
+            release->out_port = port;
+            release->buf = buf;
+            /* Add callback function to release OMX buffer to plane 1 */
+            mem = gst_memory_new_wrapped (GST_MEMORY_FLAG_NO_SHARE,
+                buf->omx_buf->pBuffer + buf->omx_buf->nOffset + offs,
+                plane_size, 0, used_size, release, GstOMXBufCallbackfunc);
+          }
+          else
+            /* Only release OMX buffer one time. Do not add callback
+             * function to other planes
+             * (These planes are from same OMX buffer) */
+            mem = gst_memory_new_wrapped (GST_MEMORY_FLAG_NO_SHARE,
+                buf->omx_buf->pBuffer + buf->omx_buf->nOffset + offs,
+                plane_size, 0, used_size, NULL, NULL);
+
+          gst_buffer_append_memory (newbuf, mem);
+
+          offs += plane_size;
         }
+
+        /* Add video meta data, which is needed to map frame */
+        gst_buffer_add_video_meta_full (newbuf, GST_VIDEO_FRAME_FLAG_NONE,
+            GST_VIDEO_INFO_FORMAT (vinfo), width, height,
+            GST_VIDEO_INFO_N_PLANES(vinfo),
+            offset, stride);
+
+        gst_buffer_ref (newbuf);
+        frame->output_buffer = newbuf;
+
         flow_ret =
             gst_video_decoder_finish_frame (GST_VIDEO_DECODER (self), frame);
+
         frame = NULL;
+        gst_buffer_unref (newbuf);
+        newbuf = NULL;
+      } else {
+        if ((flow_ret =
+                gst_video_decoder_allocate_output_frame (GST_VIDEO_DECODER
+                    (self), frame)) == GST_FLOW_OK) {
+          /* FIXME: This currently happens because of a race condition too.
+           * We first need to reconfigure the output port and then the input
+           * port if both need reconfiguration.
+           */
+          if (!gst_omx_video_dec_fill_buffer (self, buf, frame->output_buffer)) {
+            gst_buffer_replace (&frame->output_buffer, NULL);
+            flow_ret =
+                gst_video_decoder_drop_frame (GST_VIDEO_DECODER (self), frame);
+            frame = NULL;
+            gst_omx_port_release_buffer (port, buf);
+            goto invalid_buffer;
+          }
+          flow_ret =
+              gst_video_decoder_finish_frame (GST_VIDEO_DECODER (self), frame);
+          frame = NULL;
+        }
       }
     }
   } else if (frame != NULL) {
@@ -1616,7 +1742,9 @@ gst_omx_video_dec_loop (GstOMXVideoDec * self)
 
   GST_DEBUG_OBJECT (self, "Finished frame: %s", gst_flow_get_name (flow_ret));
 
-  if (buf) {
+  /* Do not release OMX buffer here if using no-copy mode
+   * In no-copy OMX buffer will be released in callback function */
+  if (buf && (self->no_copy == FALSE)) {
     err = gst_omx_port_release_buffer (port, buf);
     if (err != OMX_ErrorNone)
       goto release_error;
@@ -2607,3 +2735,47 @@ gst_omx_video_dec_decide_allocation (GstVideoDecoder * bdec, GstQuery * query)
 
   return TRUE;
 }
+
+
+static void
+gst_omx_video_dec_set_property (GObject * object, guint prop_id,
+    const GValue * value, GParamSpec * pspec)
+{
+  GstOMXVideoDec *self = GST_OMX_VIDEO_DEC (object);
+
+  switch (prop_id) {
+    case PROP_NO_COPY:
+      self->no_copy = g_value_get_boolean (value);
+      break;
+    default:
+      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
+      break;
+  }
+}
+
+static void
+gst_omx_video_dec_get_property (GObject * object, guint prop_id,
+    GValue * value, GParamSpec * pspec)
+{
+  GstOMXVideoDec *self = GST_OMX_VIDEO_DEC (object);
+
+  switch (prop_id) {
+    case PROP_NO_COPY:
+      g_value_set_boolean (value, self->no_copy);
+      break;
+    default:
+      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
+      break;
+  }
+}
+
+static void GstOMXBufCallbackfunc (struct GstOMXBufferCallback *release)
+{
+  OMX_ERRORTYPE omx_err;
+
+  if (release->buf) {
+    omx_err = gst_omx_port_release_buffer (release->out_port, release->buf);
+  }
+
+  g_free (release);
+}
\ No newline at end of file
diff --git a/omx/gstomxvideodec.h b/omx/gstomxvideodec.h
index 747bc36..219c821 100644
--- a/omx/gstomxvideodec.h
+++ b/omx/gstomxvideodec.h
@@ -75,6 +75,9 @@ struct _GstOMXVideoDec
   /* TRUE if upstream is EOS */
   gboolean eos;
 
+  /* Set TRUE to transfer decoded data without copy */
+  gboolean no_copy;
+
   GstFlowReturn downstream_flow_ret;
 };
 
-- 
1.7.9.5

